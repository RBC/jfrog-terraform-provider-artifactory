package security

import (
	"context"
	"fmt"
	"strings"

	"github.com/go-resty/resty/v2"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

const trustedKeysAPIEndPoint = "artifactory/api/security/keys/trusted"

type trustedKeyPayLoad struct {
	KeyID       string `hcl:"key_id" json:"kid"`
	Alias       string `hcl:"alias" json:"alias"`
	Fingerprint string `hcl:"fingerprint" json:"fingerprint"`
	PublicKey   string `hcl:"public_key" json:"key"`
	IssuedOn    string `hcl:"issued_on" json:"issued_on"`
	IssuedBy    string `hcl:"issued_by" json:"issued_by"`
	ValidUntil  string `hcl:"valid_until" json:"valid_until"`
}

func ResourceArtifactoryTrustedKey() *schema.Resource {
	return &schema.Resource{
		CreateContext: addTrustedKey,
		DeleteContext: deleteTrustedKey,
		ReadContext:   readTrustedKey,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		Description: "Manage the GPG trusted keys used to verify distributed release bundles",

		Schema: map[string]*schema.Schema{
			"key_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Generated by artifactory on upload",
			},
			"alias": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Will be used as a identifier when uploading/retrieving the public key via REST API",
				ForceNew:    true,
			},
			"fingerprint": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Generated by artifactory on upload",
			},
			"public_key": {
				Type:             schema.TypeString,
				Required:         true,
				Description:      "The Public key to add as trusted distribution GPG key",
				ForceNew:         true,
				StateFunc:        stripTabs,
				ValidateDiagFunc: validatePublicKey,
			},
			"issued_on": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Date when this GPG key was created",
			},
			"issued_by": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Name and eMail address of issuer",
			},
			"valid_until": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Date until this GPG key is valid",
			},
		},
	}
}

func addTrustedKey(_ context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	type keyPost struct {
		Alias     string `json:"alias"`
		PublicKey string `json:"public_key"`
	}

	var result trustedKeyPayLoad

	resp, err := m.(*resty.Client).R().SetBody(keyPost{
		d.Get("alias").(string),
		strings.ReplaceAll(d.Get("public_key").(string), "\t", ""),
	}).SetResult(&result).Post(trustedKeysAPIEndPoint)
	if err != nil {
		return diag.FromErr(err)
	}

	if resp.StatusCode() != 200 && resp.StatusCode() != 201 {
		return diag.FromErr(fmt.Errorf("unable to add key: http request failed: %s", resp.Status()))
	}

	d.Set("key_id", result.KeyID)
	d.Set("fingerprint", result.Fingerprint)
	d.Set("issued_on", result.IssuedOn)
	d.Set("issued_by", result.IssuedBy)
	d.Set("valid_until", result.ValidUntil)

	d.SetId(result.KeyID)

	return nil
}

func readTrustedKey(_ context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {

	type trustedKeysList struct {
		Keys []trustedKeyPayLoad `json:"keys"`
	}
	data := trustedKeysList{}
	resp, err := m.(*resty.Client).R().SetResult(&data).Get(trustedKeysAPIEndPoint)
	if err != nil {
		return diag.FromErr(err)
	}
	if resp.StatusCode() != 200 {
		return diag.FromErr(fmt.Errorf("unable to read key: http request failed: %s", resp.Status()))
	}

	for _, key := range data.Keys {
		if key.KeyID == d.Id() {
			d.Set("key_id", key.KeyID)
			d.Set("fingerprint", key.Fingerprint)
			// Import functionality still has to be implemented
			// d.Set("public_key", key.PublicKey)
			d.Set("issued_on", key.IssuedOn)
			d.Set("issued_by", key.IssuedBy)
			d.Set("valid_until", key.ValidUntil)
			return nil
		}
	}

	// If the ID is updated to blank, this tells Terraform the resource no longer exist
	d.SetId("")
	return nil
}

func deleteTrustedKey(_ context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	resp, err := m.(*resty.Client).R().Delete(fmt.Sprintf("%s/%s", trustedKeysAPIEndPoint, d.Id()))
	if err != nil {
		return diag.FromErr(err)
	}

	if resp.StatusCode() != 200 && resp.StatusCode() != 204 {
		return diag.FromErr(fmt.Errorf("unable to delete key: http request failed: %s", resp.Status()))
	}

	return nil
}
